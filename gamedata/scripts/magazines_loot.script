----------------------------------------------------------------
-- Deal with loot injection in stalkers and traders
----------------------------------------------------------------
gc						 	= game.translate_string
get_data 					= magazine_binder.get_data
set_data 					= magazine_binder.set_data
is_supported_weapon 		= magazine_binder.is_supported_weapon
get_magazine_caliber 		= magazine_binder.get_magazine_caliber
is_magazine					= magazine_binder.is_magazine
weapon_default_magazine		= magazine_binder.weapon_default_magazine
weapon_improved_magazine	= magazine_binder.weapon_improved_magazine
create_mag_data             = magazine_binder.create_mag_data
print_dbg                   = magazines.print_dbg

local ini_loadouts = ini_file("items\\settings\\npc_mag_loadouts.ltx")

local mag_timer_global = nil
local tm = {}
-- trader management

TraderAuto = trader_autoinject.update
function trader_autoinject.update(npc)
    TraderAuto(npc)
    stock_mags(npc)
end

-- function to resupply mags based on what weapons are in stock
-- formula is: 3 mags for 1st weapon, and 1 extra for each subsequent
function stock_mags(npc)
    local id = npc:id()
    if trader_autoinject.get_trader_type(npc) ~= trader_autoinject.SUPPLIER then return end
    print_dbg("Restocking mags for %s", npc:name())
    local to_spawn = {}
    -- collect num. of mags to spawn
    local function itr_inv(temp, item)
        local sec = item:section()
        if not IsAmmo(item) and IsWeapon(item) and is_supported_weapon(item) then
            local default_mag = weapon_default_magazine(item)
			local wpn = GetWeaponInHands()
			if wpn and (math.random(1,100)) <= 1 then
				default_mag = weapon_default_magazine(wpn)
			end
            if to_spawn[default_mag] then
                to_spawn[default_mag] = to_spawn[default_mag] + 1
            else
                to_spawn[default_mag] = 3
            end
        end
    end
    npc:iterate_inventory(itr_inv, npc)
    
    -- spawn them empty
    trader_autoinject.spawn_items(npc, to_spawn, true)
end

function GetWeaponInHands()
    local wpn = db.actor:item_in_slot(db.actor:active_slot())
    if not IsAmmo(item) and IsWeapon(item) and is_supported_weapon(item) then
        return wpn
    end
	return nil
end


-- death management
local function get_mag_prop(rank, prop)
    rank = rank or "novice"
    return ini_loadouts:r_float_ex(rank.."_mag_loadout", prop)
end

-- called on each created magazine, autofill with the appropriate crap
function random_pop_mag(mag_id, mag_sec, ammo_table, rank, quality)
    local amount = math.random(get_mag_prop(rank, "mag_fill_max"))
    local mag_data = get_data(mag_id) or create_mag_data(mag_id, mag_sec)
    local to_fill = math.floor((amount/100) * SYS_GetParam(2, mag_sec, "max_mag_size"))
	-- also pick the appropriate ammo
	local good_chance = get_mag_prop(rank, "mag_good_chance") * quality
	local ammo_to_pick = 3*math.floor(math.random(#ammo_table - 1) / 3) + 1 + (math.random(100) < good_chance and 0 or 1)
    print_dbg("Filling mag %s to %s with %s", mag_sec, to_fill, ammo_table[ammo_to_pick])
	for i=1,to_fill do
		stack.push(mag_data.loaded, ammo_table[ammo_to_pick])
	end
	set_data(mag_id, mag_data)
    return true
end

function npc_on_death(npc, who)
    local rank = ranks.get_obj_rank_name(npc)
    print_dbg("Start create release, npc rank is %s", rank)
    local found_primary = false
    local found_secondary = false
    function itr_inv(temp, item)
        local sec = item:section()
		if IsWeapon(nil,item:clsid()) and not npc:marked_dropped(item) and is_supported_weapon(item) then

            -- spawn mags for one primary, one secondary
            local is_sidearm = false
            if IsPistol(item) then
                is_sidearm = true
            end
            if (found_primary and not is_sidearm) or (found_secondary and is_sidearm) then return end

            -- reduce ammo in loaded weapon
            local mag_data = get_data(item:id())
            if mag_data then
                for i=1, math.random(#mag_data.loaded - 5) do
                    stack.pop(mag_data.loaded)
                end
                set_data(item:id(), mag_data)
            end
            
            local mags_to_spawn = math.random(0, get_mag_prop(rank, "max_mags"))
            local mag_sec = weapon_default_magazine(sec)
            local improved_mag_sec = weapon_improved_magazine(sec)
            local mag_good_chance = get_mag_prop(rank, "mag_good_chance")
            local ammo_table = get_magazine_caliber(mag_sec)
            local quality = magazines_mcm.get_config("lootquality") or 1
            print_dbg("Spawning %s mags for %s", mags_to_spawn, sec)
            for i=1,mags_to_spawn do
                -- todo roll for upgraded mag
                if improved_mag_sec and math.floor(quality * math.random(100)) <= mag_good_chance then
                    print_dbg("Creating magazine %s", improved_mag_sec)
                    local new_mag = alife_create_item(improved_mag_sec, npc)
                    if new_mag then
                        random_pop_mag(new_mag.id, improved_mag_sec, ammo_table, rank, quality)
                    end
                else
                    print_dbg("Creating magazine %s", mag_sec)
                    local new_mag = alife_create_item(mag_sec, npc)
                    if new_mag then
                        random_pop_mag(new_mag.id, mag_sec, ammo_table, rank, quality)
                    end
                end
            end
            if is_sidearm then
                found_secondary = true
            else
                found_primary = true
            end
        end
    end
    npc:iterate_inventory(itr_inv, npc)
end

function on_game_start()
	RegisterScriptCallback("npc_on_death_callback", npc_on_death)
end